// <auto-generated />
using System;
using HVLC.RentACar.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HVLC.RentACar.Data.Concrete.EntityFramework.Migrations
{
    [DbContext(typeof(RentACarContext))]
    [Migration("20221215183135_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CarServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("KM")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ModifedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarServiceId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Opel",
                            CarServiceId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 12, 10, 21, 31, 34, 905, DateTimeKind.Local).AddTicks(439),
                            FuelType = "Benzin",
                            KM = 12.0,
                            Model = "Mokka"
                        });
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.CarService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CarServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Genel bakım yapıldı",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 12, 28, 21, 31, 34, 910, DateTimeKind.Local).AddTicks(1048),
                            EntryDate = new DateTime(2022, 12, 22, 21, 31, 34, 909, DateTimeKind.Local).AddTicks(9379),
                            ReleaseDate = new DateTime(2022, 12, 27, 21, 31, 34, 910, DateTimeKind.Local).AddTicks(39)
                        });
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<double>("TcNo")
                        .HasMaxLength(11)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bağlarbaşı mah",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 12, 15, 21, 31, 34, 912, DateTimeKind.Local).AddTicks(7861),
                            EMail = "nedimhavlaci@gmail.com",
                            Name = "Nedim",
                            Password = "1234",
                            PhoneNumber = "05076089730",
                            ReservationId = 1,
                            Surname = "HAVLACI",
                            TcNo = 12345678910.0
                        });
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("FinishKm")
                        .HasMaxLength(7)
                        .HasColumnType("float");

                    b.Property<int?>("ModifedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("StartingKm")
                        .HasMaxLength(7)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Comment = "Rahat ve komforlu bir araçtı",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 12, 21, 21, 31, 34, 914, DateTimeKind.Local).AddTicks(7961),
                            DeliveryDate = new DateTime(2022, 12, 20, 21, 31, 34, 914, DateTimeKind.Local).AddTicks(6024),
                            FinishKm = 1265.0,
                            RentalDate = new DateTime(2022, 12, 15, 21, 31, 34, 914, DateTimeKind.Local).AddTicks(5473),
                            StartingKm = 1235.0
                        });
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Car", b =>
                {
                    b.HasOne("HVLC.RentACar.Entities.Concrete.CarService", "CarService")
                        .WithMany("Cars")
                        .HasForeignKey("CarServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarService");
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("HVLC.RentACar.Entities.Concrete.Reservation", "Reservation")
                        .WithMany("Customers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Reservation", b =>
                {
                    b.HasOne("HVLC.RentACar.Entities.Concrete.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Car", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.CarService", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("HVLC.RentACar.Entities.Concrete.Reservation", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
